#!/usr/bin/env python
'''Test of NI-DM FSL export tool

@author: Camille Maumet <c.m.j.maumet@warwick.ac.uk>
@copyright: University of Warwick 2014
'''
import unittest
import os
from subprocess import call
import re
import rdflib
from rdflib.graph import Graph
from rdflib import Graph, plugin, Namespace
from rdflib.parser import Parser
from rdflib.serializer import Serializer
from TestResultDataModel import TestResultDataModel

import logging

logger = logging.getLogger(__name__)

'''Tests based on the analysis of single-subject fmri fluency data as described at http://fsl.fmrib.ox.ac.uk/fslcourse/lectures/practicals/feat1/index.html but with only *1 contrast specified: Generation*
'''
class TestFSLExport(unittest.TestCase, TestResultDataModel):

    def setUp(self):
        TestResultDataModel.setUp(self) 

        print self.test_dir
        #  Turtle file obtained with FSL NI-DM export tool
        fsl_export_ttl = os.path.join(self.test_dir, 'fsl', 'export', 'test01', 'fsl_nidm.ttl');
        # fsl_export_json = os.path.join(self.test_dir, 'fsl', 'export', 'test01', 'fsl_nidm.json');
        # g.parse(data=testrdfjson, format="rdf-json")
        
        # RDF obtained by the FSL export 
        self.fslexport = Graph()
        # self.fsl_export_ttl = os.path.join(self.test_dir, 'fsl', 'export', 'test01', 'fsl_nidm.ttl');
        self.fslexport.parse(fsl_export_ttl, format='turtle')

    '''Test01: Comparing that the ttl file generated by FSL and the expected ttl file (generated manually) are identical'''
    # FIXME: If terms PR is accepted then these tests should be moved to TestResultDataModel.py
    def test01_ex1_auditory_singlesub_full_graph(self):
        #  Turtle file of ground truth (manually computed) RDF
        ground_truth_ttl = os.path.join(self.test_dir, 'fsl', 'GroundTruth', 'test01', 'test01_fsl_results.ttl');

        # RDF obtained by the ground truth export
        gt = Graph()
        gt.parse(ground_truth_ttl, format='turtle')

        self.compare_full_graphs(gt, self.fslexport)

        if self.my_execption:
            raise Exception(self.my_execption)

    # '''Test02: Test availability of attributes needed to perform a meta-analysis as specified in use-case *1* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test02_metaanalysis_usecase1(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """
    #     # Look for:
    #     # - "location" of "Contrast map",
    #     # - "location" of "Contrast variance map",
    #     # - "prov:type" in "nidm" namespace of the analysis software.
    #     query = prefixInfo+"""
    #     SELECT ?cfile ?efile ?stype WHERE {
    #      ?aid a fsl:contrast ;
    #           prov:wasAssociatedWith ?sid.
    #      ?sid a prov:Agent;
    #           a prov:SoftwareAgent;
    #           a ?stype . 
    #      FILTER regex(str(?stype), "nidm") 
    #      ?cid a nidm:contrastMap ;
    #           prov:wasGeneratedBy ?aid ;
    #           prov:atLocation ?cfile .
    #      ?eid a nidm:contrastStandardErrorMap ;
    #           prov:wasGeneratedBy ?aid ;
    #           prov:atLocation ?efile .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

    # '''Test03: Test availability of attributes needed to perform a meta-analysis as specified in use-case *2* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test03_metaanalysis_usecase2(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """

    #     # Look for:
    #     # - "location" of "Contrast map",
    #     # - "prov:type" in "nidm" namespace of the analysis software.
    #     query = prefixInfo+"""
    #     SELECT ?cfile ?efile ?stype WHERE {
    #      ?aid a fsl:contrast ;
    #           prov:wasAssociatedWith ?sid.
    #      ?sid a prov:Agent;
    #           a prov:SoftwareAgent;
    #           a ?stype . 
    #      FILTER regex(str(?stype), "nidm") 
    #      ?cid a nidm:contrastMap ;
    #           prov:wasGeneratedBy ?aid ;
    #           prov:atLocation ?cfile .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

    # '''Test04: Test availability of attributes needed to perform a meta-analysis as specified in use-case *3* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test04_metaanalysis_usecase3(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """

    #     # Look for:
    #     # - "location" of "Statistical map",
    #     # - "nidm:errorDegreesOfFreedom" in "Statistical map".
    #     query = prefixInfo+"""
    #     SELECT ?sfile ?dof WHERE {
    #      ?sid a nidm:statisticalMap ;
    #           prov:atLocation ?sfile ;
    #           nidm:errorDegreesOfFreedom ?dof .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)

    # '''Test05: Test availability of attributes needed to perform a meta-analysis as specified in use-case *4* at: http://wiki.incf.org/mediawiki/index.php/Queries'''
    # def test05_metaanalysis_usecase4(self):
    #     prefixInfo = """
    #     prefix prov: <http://www.w3.org/ns/prov#>
    #     prefix fsl: <http://www.fil.ion.ucl.ac.uk/fsl/ns/#>
    #     prefix nidm: <http://nidm.nidash.org/>

    #     """

    #     # Look for:
    #     # - For each "Peak" "equivZStat" and"coordinate1" (and optionally "coordinate2" and "coordinate3"),
    #     # - "clusterSizeInVoxels" of "height threshold"
    #     # - "value" of "extent threshold"
    #     query = prefixInfo+"""
    #     SELECT ?equivz ?coord1 ?coord2 ?coord3 ?ethresh ?hthresh WHERE {
    #      ?pid a fsl:peakLevelStatistic ;
    #         prov:atLocation ?cid ;
    #         nidm:equivalentZStatistic ?equivz ;
    #         prov:wasDerivedFrom ?clid .
    #      ?cid a nidm:coordinate;
    #         nidm:coordinate1 ?coord1 .
    #         OPTIONAL { ?cid nidm:coordinate2 ?coord2 }
    #         OPTIONAL { ?cid nidm:coordinate3 ?coord3 }
    #      ?iid a nidm:inference .
    #      ?esid a fsl:excursionSet;
    #         prov:wasGeneratedBy ?iid .
    #      ?setid a fsl:setLevelStatistic;
    #         prov:wasDerivedFrom ?esid .
    #      ?clid a fsl:clusterLevelStatistic;
    #         prov:wasDerivedFrom ?setid .
    #      ?tid a nidm:extentThreshold ;
    #         nidm:clusterSizeInVoxels ?ethresh .
    #      ?htid a nidm:heightThreshold ;
    #         prov:value ?hthresh .
    #     }
    #     """

    #     if not self.successful_retreive(self.fslexport.query(query), 'ContrastMap and ContrastStandardErrorMap'):
    #         raise Exception(self.my_execption)


if __name__ == '__main__':
    unittest.main()
